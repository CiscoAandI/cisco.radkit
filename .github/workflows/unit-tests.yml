name: Unit Tests

on:
  pull_request:
    branches: [ main, master ]
    paths:
      - 'plugins/**'
      - 'tests/unit/**'
      - 'requirements.txt'
      - '.github/workflows/unit-tests.yml'

  push:
    branches: [ main, master ]
    paths:
      - 'plugins/**'
      - 'tests/unit/**'
      - 'requirements.txt'
      - '.github/workflows/unit-tests.yml'

  workflow_dispatch:

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        ansible-version:
          - 'ansible>=6.0.0,<7.0.0'  # ansible-core 2.13
          - 'ansible>=7.0.0,<8.0.0'  # ansible-core 2.14
          - 'ansible>=8.0.0,<9.0.0'  # ansible-core 2.15
          - 'ansible>=10.0.0,<11.0.0'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-unit-${{ matrix.python-version }}-${{ hashFiles('tests/requirements.txt', 'requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-unit-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-unit-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install '${{ matrix.ansible-version }}'
          pip install -r tests/requirements.txt
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist

      - name: Install collection in proper structure
        run: |
          # Create the proper ansible_collections directory structure
          mkdir -p ~/.ansible/collections/ansible_collections/cisco/radkit
          cp -r . ~/.ansible/collections/ansible_collections/cisco/radkit/
          
      - name: Run unit tests with ansible-test
        run: |
          # Run ansible-test unit tests from the proper collection directory
          cd ~/.ansible/collections/ansible_collections/cisco/radkit
          ansible-test units --color -v \
            --requirements \
            --python ${{ matrix.python-version }} \
            --coverage

      - name: Run pytest unit tests (fallback)
        if: failure()
        run: |
          # Run pytest as fallback
          pytest tests/unit/ -v --cov=plugins --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11' && matrix.ansible-version == 'ansible>=8.0.0,<9.0.0'
        uses: codecov/codecov-action@v4
        with:
          files: ./tests/.ansible_test/coverage.xml,./coverage.xml
          fail_ci_if_error: false
          verbose: true

      - name: Create artifact name
        id: artifact-name
        run: |
          # Create a clean artifact name by removing invalid characters
          CLEAN_ANSIBLE_VERSION=$(echo "${{ matrix.ansible-version }}" | sed 's/[<>=,]/-/g' | sed 's/--*/-/g' | sed 's/-$//')
          echo "name=unit-test-results-py${{ matrix.python-version }}-${CLEAN_ANSIBLE_VERSION}" >> $GITHUB_OUTPUT

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-name.outputs.name }}
          path: |
            tests/.ansible_test/
            coverage.xml
          retention-days: 30
