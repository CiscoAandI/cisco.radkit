name: Deploy Documentation

on:
  push:
    branches: [ main, master, 2.0.0 ]
    paths:
      - 'docs/**'
      - 'plugins/**'
      - 'meta/**'
      - 'galaxy.yml'
      - '.github/workflows/docs-deploy.yml'

  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-docs-${{ hashFiles('docs/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-docs-
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt

      - name: Install collection dependencies
        run: |
          # Install the current collection in development mode
          ansible-galaxy collection install . --force

      - name: Build documentation
        run: |
          cd docs
          chmod +x build.sh
          ./build.sh

      - name: Prepare GitHub Pages content
        run: |
          # Create the pages directory
          mkdir -p _site
          
          # The build script copies files directly to docs/ root, so check there first
          if [ -f "docs/index.html" ]; then
            echo "‚úÖ Found built docs in docs root, copying to _site..."
            # Copy HTML and other web assets from docs root
            cp docs/*.html _site/ 2>/dev/null || true
            cp docs/*.js _site/ 2>/dev/null || true
            cp docs/*.inv _site/ 2>/dev/null || true
            # Copy directories (like collections, _static, etc.)
            for dir in docs/*/; do
              dirname=$(basename "$dir")
              if [ "$dirname" != "rst" ] && [ "$dirname" != "temp-rst" ] && [ -d "$dir" ]; then
                echo "Copying directory: $dirname"
                cp -r "$dir" _site/
              fi
            done
          elif [ -d "docs/html" ] && [ "$(ls -A docs/html 2>/dev/null)" ]; then
            echo "‚úÖ Found built docs in docs/html/, copying to _site..."
            cp -r docs/html/* _site/
          else
            echo "‚ùå No HTML files found, creating error page..."
            echo '<!DOCTYPE html><html><head><title>Documentation Build Failed</title></head><body><h1>Documentation Build Failed</h1><p>The documentation could not be built. Please check the build logs.</p></body></html>' > _site/index.html
          fi
          
          # Ensure .nojekyll file exists
          touch _site/.nojekyll
          
          # Verify we have an index file
          if [ ! -f "_site/index.html" ]; then
            if [ -f "_site/collections/index.html" ]; then
              echo '<!DOCTYPE html><html><head><meta http-equiv="refresh" content="0; url=collections/index.html"><title>Redirecting...</title></head><body><p>Redirecting to <a href="collections/index.html">documentation</a>...</p></body></html>' > _site/index.html
            else
              echo "‚ö†Ô∏è  Warning: No index.html found in _site"
            fi
          fi
          
          echo "üìÑ Final site structure:"
          find _site -type f \( -name "*.html" -o -name "*.js" -o -name "*.css" \) | head -10

      - name: Add custom domain (if needed)
        run: |
          # Uncomment and modify the next line if you have a custom domain
          # echo "your-custom-domain.com" > docs/html/CNAME

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
